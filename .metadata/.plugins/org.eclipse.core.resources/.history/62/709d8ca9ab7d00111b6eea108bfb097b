/**
 * Copyright (C) 2010 Handstand Technologies, LLC
 * http://handstandtech.com
 */
package com.handstandtech.restclient.server.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.Map;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.ByteArrayBody;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.InputStreamBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;

import com.handstandtech.restclient.server.auth.Authenticator;
import com.handstandtech.restclient.server.model.RESTRequest;
import com.handstandtech.restclient.shared.model.RESTResult;
import com.handstandtech.restclient.shared.model.RequestAuthentication;
import com.handstandtech.restclient.shared.model.RequestMethod;

public class RESTClientCommonsImpl extends RESTClientBaseImpl {

	public RESTClientCommonsImpl() {
		super();
	}

	@Override
	public RESTResult internalDoRequest(RequestMethod method, String urlString,
			Authenticator auth, byte[] payload, Map<String, String> headers)
			throws IOException {
		RESTResult result = null;
		try {
			RESTRequest request = new RESTRequest();
			request.setMethod(method);
			request.setUrl(urlString);
			request.setAuth(auth);
			request.setPayload(payload);
			request.setHeaders(headers);
			result = request(request);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
		}
		return result;
	}

	@Override
	public RESTResult request(RESTRequest restRequest) {
		return request(restRequest, null);
	}

	public RESTResult request(RESTRequest restRequest,
			Map<String, Object> entities) {
		RESTResult result = new RESTResult();
		result.setUrl(restRequest.getUrl());

		// create an HTTP request to a protected resource
		HttpUriRequest request = null;

		RequestMethod method = restRequest.getMethod();
		String urlString = restRequest.getUrl();
		byte[] payload = restRequest.getPayload();
		Map<String, String> requestHeaders = restRequest.getHeaders();
		Authenticator auth = restRequest.getAuth();

		result.setRequestMethod(method);

		HttpEntity entity = null;

		if (payload != null) {
			ByteArrayEntity byteEntity = new ByteArrayEntity(payload);
			byteEntity.setChunked(true);
			entity = byteEntity;
		}

		if (entities != null) {
			entity = createMultipartEntity(entities);
		}

		switch (method) {
		case GET:
			request = new HttpGet(restRequest.getUrl());
			break;
		case POST:
			HttpPost postRequest = new HttpPost(urlString);
			if (entity != null) {
				postRequest.setEntity(entity);
			}
			request = postRequest;
			break;
		case PUT:
			HttpPut putRequest = new HttpPut(urlString);
			if (entity != null) {
				putRequest.setEntity(entity);
			}
			request = putRequest;
			break;
		case DELETE:
			request = new HttpDelete(urlString);
			break;
		}

		// send the request
		HttpClient httpClient = new DefaultHttpClient();

		if (requestHeaders != null) {
			for (String key : requestHeaders.keySet()) {
				String value = requestHeaders.get(key);
				request.addHeader(key, value);
			}
		}

		// Authenticate if required
		if (auth != null) {
			auth.authenticate(request);
			result.setRequestAuthentication(auth.getRequestAuthenticationType());
		} else {
			result.setRequestAuthentication(RequestAuthentication.NONE);
		}

		try {
			HttpResponse response = httpClient.execute(request);

			// Examine the response status
			System.out.println(response.getStatusLine());

			// Get hold of the response entity
			HttpEntity responseEntity = response.getEntity();

			InputStream inputStream = responseEntity.getContent();

			InputStreamReader inputStreamReader = new InputStreamReader(
					inputStream, "UTF-8");
			BufferedReader reader = new BufferedReader(inputStreamReader);
			String line = null;
			StringBuffer responseBody = new StringBuffer();
			while ((line = reader.readLine()) != null) {
				responseBody.append(line + "\n");
			}

			result.setResponseBody(responseBody.toString());

			// 200, 404, 500, etc
			int responseCode = response.getStatusLine().getStatusCode();
			result.setResponseCode(responseCode);

			Header[] responseHeaders = response.getAllHeaders();
			for (Header header : responseHeaders) {
				String headerName = header.getName();
				String headerValue = header.getValue();
				result.addResponseHeader(headerName, headerValue);
			}

		} catch (Exception e) {
			log.error(e.getMessage(), e);
		}

		return result;
	}

	private HttpEntity createMultipartEntity(Map<String, Object> entities) {

		MultipartEntity multipartEntity = new MultipartEntity(
				HttpMultipartMode.BROWSER_COMPATIBLE);
		try {
			for (String name : entities.keySet()) {
				Object value = entities.get(name);
				if (value instanceof byte[]) {
					byte[] bytes = (byte[]) value;
					multipartEntity.addPart(name, new ByteArrayBody(bytes, ""));
				} else if (value instanceof InputStream) {
					InputStream is = (InputStream) value;
					multipartEntity.addPart(name, new InputStreamBody(is, ""));
				} else if (value instanceof File) {
					File file = (File) value;
					multipartEntity.addPart(name, new FileBody(file));
				} else if (value instanceof String) {
					String string = (String) value;
					multipartEntity.addPart(name, new StringBody(string));
				}
			}
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return multipartEntity;
	}
}
